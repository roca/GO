package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func assets_app_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4a, 0xcc,
		0x49, 0x2d, 0x2a, 0xd1, 0x50, 0xf2, 0x48, 0xcd, 0xc9, 0xc9, 0xd7, 0x51,
		0x08, 0xcf, 0x2f, 0xca, 0x49, 0x51, 0x54, 0xd2, 0xb4, 0x06, 0x04, 0x00,
		0x00, 0xff, 0xff, 0x88, 0x6a, 0xce, 0xa5, 0x17, 0x00, 0x00, 0x00,
	},
		"assets/app.js",
	)
}

func templates_index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x5c, 0x8f,
		0xbd, 0x6e, 0xc7, 0x20, 0x0c, 0xc4, 0xf7, 0x3c, 0x85, 0xc3, 0xde, 0xb2,
		0x76, 0x20, 0x2c, 0xfd, 0xdc, 0xda, 0x21, 0x4b, 0x47, 0x17, 0x1c, 0x41,
		0x04, 0x02, 0x61, 0x37, 0x6a, 0xde, 0xbe, 0x44, 0xb4, 0xcb, 0xff, 0x84,
		0x84, 0xe4, 0x3b, 0xff, 0x74, 0x36, 0xf3, 0xd3, 0xfb, 0xe3, 0xfa, 0xf9,
		0xf1, 0x0c, 0x41, 0x72, 0xb2, 0x93, 0xf9, 0xff, 0x08, 0xbd, 0x9d, 0xa0,
		0xcb, 0x48, 0x94, 0x44, 0xf6, 0x8d, 0x52, 0x2a, 0xf0, 0xd2, 0x4a, 0x86,
		0xd7, 0x32, 0x1b, 0x3d, 0xa6, 0x23, 0x91, 0x49, 0x10, 0x5c, 0xc0, 0xc6,
		0x24, 0x8b, 0xfa, 0x96, 0xed, 0xee, 0x41, 0x81, 0xfe, 0x33, 0xd9, 0xb5,
		0x58, 0x05, 0xb8, 0xb9, 0x45, 0x21, 0xf7, 0x04, 0x6b, 0xac, 0xf5, 0x7e,
		0x67, 0x05, 0x72, 0x56, 0x5a, 0x94, 0xd0, 0x8f, 0xe8, 0x1d, 0x0f, 0x1c,
		0x49, 0x75, 0x4b, 0xb2, 0x46, 0x0f, 0xa7, 0xd7, 0xd2, 0xa3, 0x97, 0xf9,
		0x2a, 0xfe, 0xbc, 0xf8, 0x6b, 0x88, 0x0c, 0xfd, 0x31, 0xb5, 0x83, 0x3c,
		0x6c, 0x57, 0x3d, 0x09, 0x04, 0x42, 0xb9, 0x26, 0x14, 0x62, 0xf0, 0xb1,
		0x91, 0x93, 0xd2, 0xce, 0xb9, 0xab, 0x03, 0xc6, 0x66, 0x07, 0x5d, 0x77,
		0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xef, 0x5e, 0xb3, 0x93, 0xfe, 0x00,
		0x00, 0x00,
	},
		"templates/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/app.js": assets_app_js,
	"templates/index.html": templates_index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"app.js": &_bintree_t{assets_app_js, map[string]*_bintree_t{
		}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{templates_index_html, map[string]*_bintree_t{
		}},
	}},
}}
