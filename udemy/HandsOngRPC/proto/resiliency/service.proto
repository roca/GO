syntax = "proto3";

package resiliency;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "resiliency/type/resiliency.proto";

option go_package = "protogen/go/resiliency";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Course - Protobuf & gRPC";
    version: "1.0.0";
  };
  host: "localhost:8081";
  schemes: HTTP;
  produces: "application/json";
};

service ResiliencyService {
  // This comment will be generated as OpenAPI summary
  // for the GetResiliency method.
  rpc GetResiliency(ResiliencyRequest) returns (ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/unary",
      body: "*"
    };
  };

  rpc GetResiliencyStream(ResiliencyRequest) 
  returns (stream ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/server_streaming",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for GetResiliencyStream",
      description: "Description for GetResiliencyStream",
      responses: {
        key: "200",
        value: {
          description: "Samplen response, 200 when ..."
        }
      },
      responses: {
        key: "400",
        value: {
          description: "Samplen response, 400 when ..."
        }
      } 
    };
  };

  rpc SendResiliencyStream(stream ResiliencyRequest)
  returns (ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/client_streaming",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for SendResiliencyStream",
      description: "Description for SendResiliencyStream",
      responses: {
        key: "200",
        value: {
          description: "Samplen response, 200 when ..."
        }
      },
      responses: {
        key: "400",
        value: {
          description: "Samplen response, 400 when ..."
        }
      } 
    };
  };

  rpc BidirectionalResiliencyStream(stream ResiliencyRequest)
  returns (stream ResiliencyResponse){
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/bidirectional_streaming",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for BidirectionalResiliencyStrea",
      description: "Description for BidirectionalResiliencyStrea",
      responses: {
        key: "200",
        value: {
          description: "Samplen response, 200 when ..."
        }
      },
      responses: {
        key: "400",
        value: {
          description: "Samplen response, 400 when ..."
        }
      } 
    };
  };

}