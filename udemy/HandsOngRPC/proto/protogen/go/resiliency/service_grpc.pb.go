// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: resiliency/service.proto

package resiliency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResiliencyService_GetResiliency_FullMethodName                 = "/resiliency.ResiliencyService/GetResiliency"
	ResiliencyService_GetResiliencyStream_FullMethodName           = "/resiliency.ResiliencyService/GetResiliencyStream"
	ResiliencyService_SendResiliencyStream_FullMethodName          = "/resiliency.ResiliencyService/SendResiliencyStream"
	ResiliencyService_BidirectionalResiliencyStream_FullMethodName = "/resiliency.ResiliencyService/BidirectionalResiliencyStream"
)

// ResiliencyServiceClient is the client API for ResiliencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResiliencyServiceClient interface {
	// This comment will be generated as OpenAPI summary
	// for the GetResiliency method.
	GetResiliency(ctx context.Context, in *ResiliencyRequest, opts ...grpc.CallOption) (*ResiliencyResponse, error)
	GetResiliencyStream(ctx context.Context, in *ResiliencyRequest, opts ...grpc.CallOption) (ResiliencyService_GetResiliencyStreamClient, error)
	SendResiliencyStream(ctx context.Context, opts ...grpc.CallOption) (ResiliencyService_SendResiliencyStreamClient, error)
	BidirectionalResiliencyStream(ctx context.Context, opts ...grpc.CallOption) (ResiliencyService_BidirectionalResiliencyStreamClient, error)
}

type resiliencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResiliencyServiceClient(cc grpc.ClientConnInterface) ResiliencyServiceClient {
	return &resiliencyServiceClient{cc}
}

func (c *resiliencyServiceClient) GetResiliency(ctx context.Context, in *ResiliencyRequest, opts ...grpc.CallOption) (*ResiliencyResponse, error) {
	out := new(ResiliencyResponse)
	err := c.cc.Invoke(ctx, ResiliencyService_GetResiliency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resiliencyServiceClient) GetResiliencyStream(ctx context.Context, in *ResiliencyRequest, opts ...grpc.CallOption) (ResiliencyService_GetResiliencyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResiliencyService_ServiceDesc.Streams[0], ResiliencyService_GetResiliencyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resiliencyServiceGetResiliencyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResiliencyService_GetResiliencyStreamClient interface {
	Recv() (*ResiliencyResponse, error)
	grpc.ClientStream
}

type resiliencyServiceGetResiliencyStreamClient struct {
	grpc.ClientStream
}

func (x *resiliencyServiceGetResiliencyStreamClient) Recv() (*ResiliencyResponse, error) {
	m := new(ResiliencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resiliencyServiceClient) SendResiliencyStream(ctx context.Context, opts ...grpc.CallOption) (ResiliencyService_SendResiliencyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResiliencyService_ServiceDesc.Streams[1], ResiliencyService_SendResiliencyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resiliencyServiceSendResiliencyStreamClient{stream}
	return x, nil
}

type ResiliencyService_SendResiliencyStreamClient interface {
	Send(*ResiliencyRequest) error
	CloseAndRecv() (*ResiliencyResponse, error)
	grpc.ClientStream
}

type resiliencyServiceSendResiliencyStreamClient struct {
	grpc.ClientStream
}

func (x *resiliencyServiceSendResiliencyStreamClient) Send(m *ResiliencyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resiliencyServiceSendResiliencyStreamClient) CloseAndRecv() (*ResiliencyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResiliencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resiliencyServiceClient) BidirectionalResiliencyStream(ctx context.Context, opts ...grpc.CallOption) (ResiliencyService_BidirectionalResiliencyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResiliencyService_ServiceDesc.Streams[2], ResiliencyService_BidirectionalResiliencyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resiliencyServiceBidirectionalResiliencyStreamClient{stream}
	return x, nil
}

type ResiliencyService_BidirectionalResiliencyStreamClient interface {
	Send(*ResiliencyRequest) error
	Recv() (*ResiliencyResponse, error)
	grpc.ClientStream
}

type resiliencyServiceBidirectionalResiliencyStreamClient struct {
	grpc.ClientStream
}

func (x *resiliencyServiceBidirectionalResiliencyStreamClient) Send(m *ResiliencyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resiliencyServiceBidirectionalResiliencyStreamClient) Recv() (*ResiliencyResponse, error) {
	m := new(ResiliencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResiliencyServiceServer is the server API for ResiliencyService service.
// All implementations must embed UnimplementedResiliencyServiceServer
// for forward compatibility
type ResiliencyServiceServer interface {
	// This comment will be generated as OpenAPI summary
	// for the GetResiliency method.
	GetResiliency(context.Context, *ResiliencyRequest) (*ResiliencyResponse, error)
	GetResiliencyStream(*ResiliencyRequest, ResiliencyService_GetResiliencyStreamServer) error
	SendResiliencyStream(ResiliencyService_SendResiliencyStreamServer) error
	BidirectionalResiliencyStream(ResiliencyService_BidirectionalResiliencyStreamServer) error
	mustEmbedUnimplementedResiliencyServiceServer()
}

// UnimplementedResiliencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResiliencyServiceServer struct {
}

func (UnimplementedResiliencyServiceServer) GetResiliency(context.Context, *ResiliencyRequest) (*ResiliencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResiliency not implemented")
}
func (UnimplementedResiliencyServiceServer) GetResiliencyStream(*ResiliencyRequest, ResiliencyService_GetResiliencyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResiliencyStream not implemented")
}
func (UnimplementedResiliencyServiceServer) SendResiliencyStream(ResiliencyService_SendResiliencyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendResiliencyStream not implemented")
}
func (UnimplementedResiliencyServiceServer) BidirectionalResiliencyStream(ResiliencyService_BidirectionalResiliencyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalResiliencyStream not implemented")
}
func (UnimplementedResiliencyServiceServer) mustEmbedUnimplementedResiliencyServiceServer() {}

// UnsafeResiliencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResiliencyServiceServer will
// result in compilation errors.
type UnsafeResiliencyServiceServer interface {
	mustEmbedUnimplementedResiliencyServiceServer()
}

func RegisterResiliencyServiceServer(s grpc.ServiceRegistrar, srv ResiliencyServiceServer) {
	s.RegisterService(&ResiliencyService_ServiceDesc, srv)
}

func _ResiliencyService_GetResiliency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResiliencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResiliencyServiceServer).GetResiliency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResiliencyService_GetResiliency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResiliencyServiceServer).GetResiliency(ctx, req.(*ResiliencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResiliencyService_GetResiliencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResiliencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResiliencyServiceServer).GetResiliencyStream(m, &resiliencyServiceGetResiliencyStreamServer{stream})
}

type ResiliencyService_GetResiliencyStreamServer interface {
	Send(*ResiliencyResponse) error
	grpc.ServerStream
}

type resiliencyServiceGetResiliencyStreamServer struct {
	grpc.ServerStream
}

func (x *resiliencyServiceGetResiliencyStreamServer) Send(m *ResiliencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ResiliencyService_SendResiliencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResiliencyServiceServer).SendResiliencyStream(&resiliencyServiceSendResiliencyStreamServer{stream})
}

type ResiliencyService_SendResiliencyStreamServer interface {
	SendAndClose(*ResiliencyResponse) error
	Recv() (*ResiliencyRequest, error)
	grpc.ServerStream
}

type resiliencyServiceSendResiliencyStreamServer struct {
	grpc.ServerStream
}

func (x *resiliencyServiceSendResiliencyStreamServer) SendAndClose(m *ResiliencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resiliencyServiceSendResiliencyStreamServer) Recv() (*ResiliencyRequest, error) {
	m := new(ResiliencyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResiliencyService_BidirectionalResiliencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResiliencyServiceServer).BidirectionalResiliencyStream(&resiliencyServiceBidirectionalResiliencyStreamServer{stream})
}

type ResiliencyService_BidirectionalResiliencyStreamServer interface {
	Send(*ResiliencyResponse) error
	Recv() (*ResiliencyRequest, error)
	grpc.ServerStream
}

type resiliencyServiceBidirectionalResiliencyStreamServer struct {
	grpc.ServerStream
}

func (x *resiliencyServiceBidirectionalResiliencyStreamServer) Send(m *ResiliencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resiliencyServiceBidirectionalResiliencyStreamServer) Recv() (*ResiliencyRequest, error) {
	m := new(ResiliencyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResiliencyService_ServiceDesc is the grpc.ServiceDesc for ResiliencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResiliencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resiliency.ResiliencyService",
	HandlerType: (*ResiliencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResiliency",
			Handler:    _ResiliencyService_GetResiliency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResiliencyStream",
			Handler:       _ResiliencyService_GetResiliencyStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendResiliencyStream",
			Handler:       _ResiliencyService_SendResiliencyStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalResiliencyStream",
			Handler:       _ResiliencyService_BidirectionalResiliencyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resiliency/service.proto",
}
